<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\SIM\rtx-app-sim.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\SIM\rtx-app-sim.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sun Jul 03 21:58:40 2022
<BR><P>
<H3>Maximum Stack Usage =        384 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
UART0_IRQHandler &rArr; k_send_msg_nb &rArr; k_mbx_sender_unblock_receiver &rArr; k_tsk_run_new &rArr; scheduler_triage &rArr; FL_Insert_Back &rArr; FL_Insert_After &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[3e]">K_RESTORE</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[20]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2c]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[23]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[24]">DMA_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d]">EINT1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">EINT3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">ENET_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from ae_util.o(i.HardFault_Handler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[25]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">PWM1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">RTC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[17]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from hal.o(i.SVC_Handler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[30]">SVC_RTE</a> from hal.o(.emb_text) referenced from k_task.o(i.k_tsk_create_new)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">SystemInit</a> from system_lpc17xx.o(i.SystemInit) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[b]">TIMER0_IRQHandler</a> from timer.o(i.TIMER0_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[c]">TIMER1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[d]">TIMER2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[e]">TIMER3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[f]">UART0_IRQHandler</a> from uart_irq.o(i.UART0_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[10]">UART1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[11]">UART2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">UART3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2b]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">USB_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[a]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[35]">k_pre_rtx_init</a> from k_rtx_init.o(i.k_pre_rtx_init) referenced from main.o(i.main)
 <LI><a href="#[2d]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[34]">putc</a> from uart_polling.o(i.putc) referenced from main.o(i.main)
 <LI><a href="#[3a]">putcp</a> from printf.o(i.putcp) referenced from printf.o(i.tfp_sprintf)
 <LI><a href="#[36]">task0</a> from ae_tasks10_g30.o(i.task0) referenced from ae_tasks10_g30.o(i.set_ae_tasks)
 <LI><a href="#[37]">task1</a> from ae_tasks10_g30.o(i.task1) referenced from ae_tasks10_g30.o(i.set_ae_tasks)
 <LI><a href="#[38]">task2</a> from ae_tasks10_g30.o(i.task2) referenced from ae_tasks10_g30.o(i.test0_start)
 <LI><a href="#[39]">task3</a> from ae_tasks10_g30.o(i.task3) referenced from ae_tasks10_g30.o(i.test0_start)
 <LI><a href="#[31]">task_cdisp</a> from cdisp_task.o(i.task_cdisp) referenced from k_task.o(i.k_tsk_init_CDISP)
 <LI><a href="#[32]">task_kcd</a> from kcd_task.o(i.task_kcd) referenced from k_task.o(i.k_tsk_init_KCD)
 <LI><a href="#[33]">task_null</a> from null_task.o(i.task_null) referenced from k_task.o(i.k_tsk_init_first)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[af]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[42]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b0]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[b1]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[b2]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[b3]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[b4]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[b5]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[30]"></a>SVC_RTE</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, hal.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> k_task.o(i.k_tsk_create_new)
</UL>
<P><STRONG><a name="[b6]"></a>__rte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal.o(.emb_text), UNUSED)

<P><STRONG><a name="[97]"></a>k_tsk_switch</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, k_task.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_run_new
</UL>

<P><STRONG><a name="[3e]"></a>K_RESTORE</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, k_task.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_start
</UL>

<P><STRONG><a name="[3d]"></a>k_tsk_start</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, k_task.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_RESTORE
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_rtx_init
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_get
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_kcd
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[3c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[bc]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>BA_Get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bit_array.o(i.BA_Get))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coalesce
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_dealloc
</UL>

<P><STRONG><a name="[8a]"></a>BA_Toggle</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bit_array.o(i.BA_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BA_Toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_dealloc
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_alloc
</UL>

<P><STRONG><a name="[46]"></a>FL_Insert</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, freelist.o(i.FL_Insert))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Insert_Back
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_triage
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_create
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_dealloc
</UL>

<P><STRONG><a name="[43]"></a>FL_Insert_After</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, freelist.o(i.FL_Insert_After))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FL_Insert_After &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Insert_Back
</UL>

<P><STRONG><a name="[45]"></a>FL_Insert_Back</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, freelist.o(i.FL_Insert_Back))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = FL_Insert_Back &rArr; FL_Insert_After &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Insert
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Insert_After
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_triage
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_msg_triage
</UL>

<P><STRONG><a name="[47]"></a>FL_Pop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, freelist.o(i.FL_Pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_Pop
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Remove
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbx_empty_pq
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbx_destroy
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_create
</UL>

<P><STRONG><a name="[49]"></a>FL_Print</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, freelist.o(i.FL_Print))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = FL_Print &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_dump
</UL>

<P><STRONG><a name="[bd]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[48]"></a>FL_Remove</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, freelist.o(i.FL_Remove))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Pop
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coalesce
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_set_prio
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_alloc
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ae_util.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HardFault_Handler &rArr; test_abort &rArr; print_summary &rArr; print_results &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, hal.o(i.SVC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = SVC_Handler &rArr; k_send_msg &rArr; k_mbx_sender_unblock_receiver &rArr; k_tsk_run_new &rArr; scheduler_triage &rArr; FL_Insert_Back &rArr; FL_Insert_After &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_set_prio
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_ls
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_gettid
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_get
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_exit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_create
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_send_msg
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_rtx_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_rt_tsk_susp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_rt_tsk_set
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_rt_tsk_get
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_recv_msg
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_dump
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_dealloc
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_alloc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbx_ls
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbx_get
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_yield
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_send_msg_nb
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_recv_msg_nb
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbx_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SystemInit</STRONG> (Thumb, 302 bytes, Stack size 0 bytes, system_lpc17xx.o(i.SystemInit))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[b]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer.o(i.TIMER0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UART0_IRQHandler</STRONG> (Thumb, 286 bytes, Stack size 152 bytes, uart_irq.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = UART0_IRQHandler &rArr; k_send_msg_nb &rArr; k_mbx_sender_unblock_receiver &rArr; k_tsk_run_new &rArr; scheduler_triage &rArr; FL_Insert_Back &rArr; FL_Insert_After &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_yield
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_send_msg_nb
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_recv_msg_nb
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_put_string
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[bf]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[a3]"></a>ae_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ae.o(i.ae_exit))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_summary
</UL>

<P><STRONG><a name="[64]"></a>ae_init</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ae.o(i.ae_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ae_init &rArr; ae_set_init_tasks_info &rArr; set_ae_init_tasks &rArr; set_ae_tasks &rArr; init_ae_tsk_test &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_set_sys_info
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_set_init_tasks_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>ae_set_init_tasks_info</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ae.o(i.ae_set_init_tasks_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ae_set_init_tasks_info &rArr; set_ae_init_tasks &rArr; set_ae_tasks &rArr; init_ae_tsk_test &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ae_init_tasks
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_init
</UL>

<P><STRONG><a name="[65]"></a>ae_set_sys_info</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ae.o(i.ae_set_sys_info))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_init
</UL>

<P><STRONG><a name="[6b]"></a>cbuf_deepcopy</STRONG> (Thumb, 56 bytes, Stack size 28 bytes, cbuf.o(i.cbuf_deepcopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = cbuf_deepcopy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbuf_peek_front
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbuf_insert_back
</UL>

<P><STRONG><a name="[68]"></a>cbuf_destroy</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cbuf.o(i.cbuf_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cbuf_destroy &rArr; k_mpool_dealloc &rArr; coalesce
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_dealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_buf_destroy
</UL>

<P><STRONG><a name="[69]"></a>cbuf_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cbuf.o(i.cbuf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = cbuf_init &rArr; k_mpool_alloc &rArr; split &rArr; BA_Toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_buf_init
</UL>

<P><STRONG><a name="[6a]"></a>cbuf_insert_back</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, cbuf.o(i.cbuf_insert_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = cbuf_insert_back &rArr; cbuf_deepcopy
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbuf_deepcopy
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_buf_send
</UL>

<P><STRONG><a name="[6c]"></a>cbuf_peek_front</STRONG> (Thumb, 58 bytes, Stack size 28 bytes, cbuf.o(i.cbuf_peek_front))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cbuf_peek_front &rArr; cbuf_deepcopy
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbuf_deepcopy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbuf_remove_front
</UL>

<P><STRONG><a name="[6d]"></a>cbuf_remove_front</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cbuf.o(i.cbuf_remove_front))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cbuf_remove_front &rArr; cbuf_peek_front &rArr; cbuf_deepcopy
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbuf_peek_front
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_buf_recieve
</UL>

<P><STRONG><a name="[84]"></a>check_size</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, k_mem_utils.o(i.check_size))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_alloc
</UL>

<P><STRONG><a name="[6e]"></a>coalesce</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, k_mem_utils.o(i.coalesce))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = coalesce
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xk_to_bit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_value_to_address
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_size_from_FL_index
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Remove
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BA_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_dealloc
</UL>

<P><STRONG><a name="[a1]"></a>count_set_bits</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ae_util.o(i.count_set_bits))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_results
</UL>

<P><STRONG><a name="[73]"></a>gen_req0</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, ae_tasks10_g30.o(i.gen_req0))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gen_req0
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ae_xtest
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test0_start
</UL>

<P><STRONG><a name="[75]"></a>gen_req1</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, ae_tasks10_g30.o(i.gen_req1))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gen_req1
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ae_xtest
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test1_start
</UL>

<P><STRONG><a name="[87]"></a>get_FL_layer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, k_mem_utils.o(i.get_FL_layer))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_alloc
</UL>

<P><STRONG><a name="[71]"></a>get_size_from_FL_index</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, k_mem_utils.o(i.get_size_from_FL_index))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coalesce
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_dump
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_dealloc
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_alloc
</UL>

<P><STRONG><a name="[89]"></a>get_x_value</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, k_mem_utils.o(i.get_x_value))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_alloc
</UL>

<P><STRONG><a name="[78]"></a>init_ae_tsk_test</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ae_tasks10_g30.o(i.init_ae_tsk_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = init_ae_tsk_test &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ae_tasks
</UL>

<P><STRONG><a name="[99]"></a>init_printf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf.o(i.init_printf))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>k_mbx_create</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, k_msg.o(i.k_mbx_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = k_mbx_create &rArr; msg_buf_init &rArr; cbuf_init &rArr; k_mpool_alloc &rArr; split &rArr; BA_Toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_buf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_init
</UL>

<P><STRONG><a name="[7a]"></a>k_mbx_destroy</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, k_msg.o(i.k_mbx_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = k_mbx_destroy &rArr; scheduler_triage &rArr; FL_Insert_Back &rArr; FL_Insert_After &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_triage
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_buf_destroy
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Pop
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_dealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_exit
</UL>

<P><STRONG><a name="[7d]"></a>k_mbx_empty_pq</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, k_msg.o(i.k_mbx_empty_pq))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = k_mbx_empty_pq &rArr; k_tsk_run_new &rArr; scheduler_triage &rArr; FL_Insert_Back &rArr; FL_Insert_After &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_triage
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_buf_send
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_run_new
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Pop
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_buf_space
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_dealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_recv_msg
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_recv_msg_nb
</UL>

<P><STRONG><a name="[5c]"></a>k_mbx_get</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, k_msg.o(i.k_mbx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = k_mbx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_buf_space
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[5b]"></a>k_mbx_ls</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, k_msg.o(i.k_mbx_ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = k_mbx_ls
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[81]"></a>k_mbx_sender_unblock_receiver</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, k_msg.o(i.k_mbx_sender_unblock_receiver))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = k_mbx_sender_unblock_receiver &rArr; k_tsk_run_new &rArr; scheduler_triage &rArr; FL_Insert_Back &rArr; FL_Insert_After &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_triage
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_run_new
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_send_msg
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_send_msg_nb
</UL>

<P><STRONG><a name="[82]"></a>k_mem_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, k_mem.o(i.k_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = k_mem_init &rArr; k_mpool_create
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_create
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_pre_rtx_init
</UL>

<P><STRONG><a name="[4c]"></a>k_mpool_alloc</STRONG> (Thumb, 262 bytes, Stack size 64 bytes, k_mem.o(i.k_mpool_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = k_mpool_alloc &rArr; split &rArr; BA_Toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xk_to_bit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_base2
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2_32
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_x_value
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_size_from_FL_index
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_FL_layer
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_size
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Remove
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BA_Toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_create_new
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_pre_rtx_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_msg_triage
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_send_msg
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbuf_init
</UL>

<P><STRONG><a name="[83]"></a>k_mpool_create</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, k_mem.o(i.k_mpool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = k_mpool_create
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2_32
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Insert
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_init
</UL>

<P><STRONG><a name="[4d]"></a>k_mpool_dealloc</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, k_mem.o(i.k_mpool_dealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = k_mpool_dealloc &rArr; coalesce
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xk_to_bit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_value_to_address
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_size_from_FL_index
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coalesce
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Insert
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BA_Toggle
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BA_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbx_empty_pq
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbx_destroy
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_set_prio
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_exit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_send_msg
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbuf_destroy
</UL>

<P><STRONG><a name="[4e]"></a>k_mpool_dump</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, k_mem.o(i.k_mpool_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = k_mpool_dump &rArr; FL_Print &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_size_from_FL_index
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Print
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[35]"></a>k_pre_rtx_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, k_rtx_init.o(i.k_pre_rtx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = k_pre_rtx_init &rArr; k_mpool_alloc &rArr; split &rArr; BA_Toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[59]"></a>k_recv_msg</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, k_msg.o(i.k_recv_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = k_recv_msg &rArr; k_mbx_empty_pq &rArr; k_tsk_run_new &rArr; scheduler_triage &rArr; FL_Insert_Back &rArr; FL_Insert_After &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_buf_recieve
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_run_new
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbx_empty_pq
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_buf_check_space_used
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[5a]"></a>k_recv_msg_nb</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, k_msg.o(i.k_recv_msg_nb))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = k_recv_msg_nb &rArr; k_mbx_empty_pq &rArr; k_tsk_run_new &rArr; scheduler_triage &rArr; FL_Insert_Back &rArr; FL_Insert_After &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_buf_recieve
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbx_empty_pq
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_buf_check_space_used
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[5f]"></a>k_rt_tsk_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, k_task.o(i.k_rt_tsk_get))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[5d]"></a>k_rt_tsk_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, k_task.o(i.k_rt_tsk_set))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[5e]"></a>k_rt_tsk_susp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, k_task.o(i.k_rt_tsk_susp))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[4b]"></a>k_rtx_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, k_rtx_init.o(i.k_rtx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = k_rtx_init &rArr; k_tsk_init &rArr; scheduler_triage &rArr; FL_Insert_Back &rArr; FL_Insert_After &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[57]"></a>k_send_msg</STRONG> (Thumb, 428 bytes, Stack size 40 bytes, k_msg.o(i.k_send_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = k_send_msg &rArr; k_mbx_sender_unblock_receiver &rArr; k_tsk_run_new &rArr; scheduler_triage &rArr; FL_Insert_Back &rArr; FL_Insert_After &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_buf_send
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_buf_pq_full
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_run_new
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_msg_triage
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbx_sender_unblock_receiver
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_buf_space
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_dealloc
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[58]"></a>k_send_msg_nb</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, k_msg.o(i.k_send_msg_nb))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = k_send_msg_nb &rArr; k_mbx_sender_unblock_receiver &rArr; k_tsk_run_new &rArr; scheduler_triage &rArr; FL_Insert_Back &rArr; FL_Insert_After &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_buf_send
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbx_sender_unblock_receiver
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_buf_space
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[4f]"></a>k_tsk_create</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, k_task.o(i.k_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = k_tsk_create &rArr; k_tsk_run_new &rArr; scheduler_triage &rArr; FL_Insert_Back &rArr; FL_Insert_After &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_create_new
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_triage
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_run_new
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Pop
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[91]"></a>k_tsk_create_new</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, k_task.o(i.k_tsk_create_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = k_tsk_create_new &rArr; k_mpool_alloc &rArr; split &rArr; BA_Toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_base2
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_create
</UL>

<P><STRONG><a name="[50]"></a>k_tsk_exit</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, k_task.o(i.k_tsk_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = k_tsk_exit &rArr; k_mbx_destroy &rArr; scheduler_triage &rArr; FL_Insert_Back &rArr; FL_Insert_After &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_run_new
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbx_destroy
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_dealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[53]"></a>k_tsk_get</STRONG> (Thumb, 162 bytes, Stack size 104 bytes, k_task.o(i.k_tsk_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = k_tsk_get &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[54]"></a>k_tsk_gettid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, k_task.o(i.k_tsk_gettid))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[8e]"></a>k_tsk_init</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, k_task.o(i.k_tsk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = k_tsk_init &rArr; scheduler_triage &rArr; FL_Insert_Back &rArr; FL_Insert_After &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_init_first
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_init_KCD
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_init_CDISP
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_create_new
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_triage
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_rtx_init
</UL>

<P><STRONG><a name="[95]"></a>k_tsk_init_CDISP</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, k_task.o(i.k_tsk_init_CDISP))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_init
</UL>

<P><STRONG><a name="[94]"></a>k_tsk_init_KCD</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, k_task.o(i.k_tsk_init_KCD))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_init
</UL>

<P><STRONG><a name="[93]"></a>k_tsk_init_first</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, k_task.o(i.k_tsk_init_first))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_init
</UL>

<P><STRONG><a name="[55]"></a>k_tsk_ls</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, k_task.o(i.k_tsk_ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = k_tsk_ls &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[90]"></a>k_tsk_msg_triage</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, k_task.o(i.k_tsk_msg_triage))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = k_tsk_msg_triage &rArr; FL_Insert_Back &rArr; FL_Insert_After &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Insert_Back
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_set_prio
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_send_msg
</UL>

<P><STRONG><a name="[80]"></a>k_tsk_run_new</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, k_task.o(i.k_tsk_run_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = k_tsk_run_new &rArr; scheduler_triage &rArr; FL_Insert_Back &rArr; FL_Insert_After &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_switch
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_triage
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbx_sender_unblock_receiver
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbx_empty_pq
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_set_prio
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_exit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_create
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_send_msg
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_recv_msg
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_yield
</UL>

<P><STRONG><a name="[52]"></a>k_tsk_set_prio</STRONG> (Thumb, 514 bytes, Stack size 16 bytes, k_task.o(i.k_tsk_set_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = k_tsk_set_prio &rArr; k_tsk_run_new &rArr; scheduler_triage &rArr; FL_Insert_Back &rArr; FL_Insert_After &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_triage
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_run_new
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_msg_triage
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Remove
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_dealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[51]"></a>k_tsk_yield</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, k_task.o(i.k_tsk_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = k_tsk_yield &rArr; k_tsk_run_new &rArr; scheduler_triage &rArr; FL_Insert_Back &rArr; FL_Insert_After &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_run_new
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[86]"></a>log2_32</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, math.o(i.log2_32))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_base2
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_create
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_alloc
</UL>

<P><STRONG><a name="[2d]"></a>main</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = main &rArr; ae_init &rArr; ae_set_init_tasks_info &rArr; set_ae_init_tasks &rArr; set_ae_tasks &rArr; init_ae_tsk_test &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_printf
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_init
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[7c]"></a>msg_buf_destroy</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, msg_buf.o(i.msg_buf_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = msg_buf_destroy &rArr; cbuf_destroy &rArr; k_mpool_dealloc &rArr; coalesce
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbuf_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbx_destroy
</UL>

<P><STRONG><a name="[79]"></a>msg_buf_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, msg_buf.o(i.msg_buf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = msg_buf_init &rArr; cbuf_init &rArr; k_mpool_alloc &rArr; split &rArr; BA_Toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbuf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbx_create
</UL>

<P><STRONG><a name="[8f]"></a>msg_buf_pq_full</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, msg_buf.o(i.msg_buf_pq_full))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_send_msg
</UL>

<P><STRONG><a name="[8c]"></a>msg_buf_recieve</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, msg_buf.o(i.msg_buf_recieve))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = msg_buf_recieve &rArr; cbuf_remove_front &rArr; cbuf_peek_front &rArr; cbuf_deepcopy
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbuf_remove_front
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_recv_msg
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_recv_msg_nb
</UL>

<P><STRONG><a name="[7f]"></a>msg_buf_send</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, msg_buf.o(i.msg_buf_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = msg_buf_send &rArr; cbuf_insert_back &rArr; cbuf_deepcopy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbuf_insert_back
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbx_empty_pq
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_send_msg
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_send_msg_nb
</UL>

<P><STRONG><a name="[9a]"></a>print_all_tasks</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, kcd_task.o(i.print_all_tasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = print_all_tasks &rArr; print_task &rArr; tfp_sprintf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_task
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_kcd
</UL>

<P><STRONG><a name="[9c]"></a>print_error</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, kcd_task.o(i.print_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = print_error &rArr; tfp_sprintf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_kcd
</UL>

<P><STRONG><a name="[9e]"></a>print_log</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ae_util.o(i.print_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = print_log &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sub_result
</UL>

<P><STRONG><a name="[9f]"></a>print_mailbox_tasks</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, kcd_task.o(i.print_mailbox_tasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = print_mailbox_tasks &rArr; print_task &rArr; tfp_sprintf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_task
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_kcd
</UL>

<P><STRONG><a name="[a0]"></a>print_results</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, ae_util.o(i.print_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = print_results &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_summary
</UL>

<P><STRONG><a name="[a2]"></a>print_summary</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ae_util.o(i.print_summary))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = print_summary &rArr; print_results &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_results
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_abort
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_exit
</UL>

<P><STRONG><a name="[9b]"></a>print_task</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, kcd_task.o(i.print_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = print_task &rArr; tfp_sprintf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_mailbox_tasks
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_all_tasks
</UL>

<P><STRONG><a name="[a4]"></a>process_sub_result</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ae_util.o(i.process_sub_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = process_sub_result &rArr; print_log &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_log
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test1_start
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test0_start
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task3
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task0
</UL>

<P><STRONG><a name="[34]"></a>putc</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, uart_polling.o(i.putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = putc &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_put_string
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_put_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[96]"></a>scheduler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, k_task.o(i.scheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = scheduler &rArr; FL_Pop
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Pop
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_run_new
</UL>

<P><STRONG><a name="[7b]"></a>scheduler_triage</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, k_task.o(i.scheduler_triage))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = scheduler_triage &rArr; FL_Insert_Back &rArr; FL_Insert_After &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Insert_Back
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Insert
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_run_new
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbx_sender_unblock_receiver
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbx_empty_pq
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbx_destroy
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_set_prio
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_create
</UL>

<P><STRONG><a name="[67]"></a>set_ae_init_tasks</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ae_tasks10_g30.o(i.set_ae_init_tasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = set_ae_init_tasks &rArr; set_ae_tasks &rArr; init_ae_tsk_test &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ae_tasks
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_set_init_tasks_info
</UL>

<P><STRONG><a name="[a6]"></a>set_ae_tasks</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ae_tasks10_g30.o(i.set_ae_tasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = set_ae_tasks &rArr; init_ae_tsk_test &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ae_tsk_test
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ae_init_tasks
</UL>

<P><STRONG><a name="[88]"></a>split</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, k_mem_utils.o(i.split))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = split &rArr; BA_Toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xk_to_bit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_x_value
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_size_from_FL_index
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Remove
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Insert
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BA_Toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_alloc
</UL>

<P><STRONG><a name="[ab]"></a>strcpy</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ae_util.o(i.strcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test1_start
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test0_start
</UL>

<P><STRONG><a name="[36]"></a>task0</STRONG> (Thumb, 484 bytes, Stack size 40 bytes, ae_tasks10_g30.o(i.task0))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = task0 &rArr; test1_start &rArr; test_exit &rArr; print_summary &rArr; print_results &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_sprintf
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_exit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sub_result
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_exec_seq
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test1_start
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test0_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ae_tasks10_g30.o(i.set_ae_tasks)
</UL>
<P><STRONG><a name="[37]"></a>task1</STRONG> (Thumb, 174 bytes, Stack size 88 bytes, ae_tasks10_g30.o(i.task1))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = task1 &rArr; process_sub_result &rArr; print_log &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_sprintf
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sub_result
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_exec_seq
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ae_tasks10_g30.o(i.set_ae_tasks)
</UL>
<P><STRONG><a name="[38]"></a>task2</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, ae_tasks10_g30.o(i.task2))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = task2 &rArr; process_sub_result &rArr; print_log &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_sprintf
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sub_result
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_exec_seq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ae_tasks10_g30.o(i.test0_start)
</UL>
<P><STRONG><a name="[39]"></a>task3</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, ae_tasks10_g30.o(i.task3))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = task3 &rArr; process_sub_result &rArr; print_log &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_sprintf
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sub_result
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_exec_seq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ae_tasks10_g30.o(i.test0_start)
</UL>
<P><STRONG><a name="[31]"></a>task_cdisp</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, cdisp_task.o(i.task_cdisp))
<BR>[Address Reference Count : 1]<UL><LI> k_task.o(i.k_tsk_init_CDISP)
</UL>
<P><STRONG><a name="[32]"></a>task_kcd</STRONG> (Thumb, 410 bytes, Stack size 72 bytes, kcd_task.o(i.task_kcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = task_kcd &rArr; print_mailbox_tasks &rArr; print_task &rArr; tfp_sprintf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_sprintf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_mailbox_tasks
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_all_tasks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> k_task.o(i.k_tsk_init_KCD)
</UL>
<P><STRONG><a name="[33]"></a>task_null</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, null_task.o(i.task_null))
<BR>[Address Reference Count : 1]<UL><LI> k_task.o(i.k_tsk_init_first)
</UL>
<P><STRONG><a name="[a8]"></a>test0_start</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, ae_tasks10_g30.o(i.test0_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = test0_start &rArr; test_exit &rArr; print_summary &rArr; print_results &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_exit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sub_result
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_req0
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task0
</UL>

<P><STRONG><a name="[aa]"></a>test1_start</STRONG> (Thumb, 370 bytes, Stack size 56 bytes, ae_tasks10_g30.o(i.test1_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = test1_start &rArr; test_exit &rArr; print_summary &rArr; print_results &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_sprintf
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_exit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sub_result
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_req1
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task0
</UL>

<P><STRONG><a name="[4a]"></a>test_abort</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ae_util.o(i.test_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = test_abort &rArr; print_summary &rArr; print_results &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_summary
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[a9]"></a>test_exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ae_util.o(i.test_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = test_exit &rArr; print_summary &rArr; print_results &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_summary
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test1_start
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test0_start
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task0
</UL>

<P><STRONG><a name="[ac]"></a>tfp_format</STRONG> (Thumb, 296 bytes, Stack size 56 bytes, printf.o(i.tfp_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui2a
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchw
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2a
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2i
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_sprintf
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
</UL>

<P><STRONG><a name="[44]"></a>tfp_printf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf.o(i.tfp_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_format
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Print
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_set_prio
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_ls
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_get
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_exit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_create
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_dump
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_abort
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_summary
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_results
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_log
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_exit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test1_start
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task3
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task0
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ae_tsk_test
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Insert_After
</UL>

<P><STRONG><a name="[9d]"></a>tfp_sprintf</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printf.o(i.tfp_sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tfp_sprintf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_format
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putcp
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_kcd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test1_start
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task3
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task0
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_task
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error
</UL>

<P><STRONG><a name="[98]"></a>uart_init</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, uart_polling.o(i.uart_init))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>uart_irq_init</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, uart_irq.o(i.uart_irq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = uart_irq_init &rArr; k_mbx_create &rArr; msg_buf_init &rArr; cbuf_init &rArr; k_mpool_alloc &rArr; split &rArr; BA_Toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbx_create
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_rtx_init
</UL>

<P><STRONG><a name="[a5]"></a>uart_put_char</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, uart_polling.o(i.uart_put_char))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_put_string
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>

<P><STRONG><a name="[60]"></a>uart_put_string</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, uart_polling.o(i.uart_put_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_put_char
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>

<P><STRONG><a name="[74]"></a>update_ae_xtest</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ae_tasks10_g30.o(i.update_ae_xtest))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_req1
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_req0
</UL>

<P><STRONG><a name="[a7]"></a>update_exec_seq</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ae_tasks10_g30.o(i.update_exec_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_exec_seq
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task3
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task0
</UL>

<P><STRONG><a name="[85]"></a>upper_base2</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, math.o(i.upper_base2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = upper_base2
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2_32
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_create_new
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_alloc
</UL>

<P><STRONG><a name="[72]"></a>x_value_to_address</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, k_mem_utils.o(i.x_value_to_address))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coalesce
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_dealloc
</UL>

<P><STRONG><a name="[6f]"></a>xk_to_bit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, k_mem_utils.o(i.xk_to_bit))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coalesce
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_dealloc
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mpool_alloc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ae]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uart_irq.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_init
</UL>

<P><STRONG><a name="[8b]"></a>msg_buf_check_space_used</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, k_msg.o(i.msg_buf_check_space_used))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_recv_msg
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_recv_msg_nb
</UL>

<P><STRONG><a name="[7e]"></a>msg_buf_space</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, k_msg.o(i.msg_buf_space))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbx_empty_pq
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_send_msg
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbx_get
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_send_msg_nb
</UL>

<P><STRONG><a name="[63]"></a>a2d</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, printf.o(i.a2d))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2i
</UL>

<P><STRONG><a name="[62]"></a>a2i</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, printf.o(i.a2i))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = a2i
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2d
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_format
</UL>

<P><STRONG><a name="[76]"></a>i2a</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, printf.o(i.i2a))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = i2a &rArr; ui2a
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui2a
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_format
</UL>

<P><STRONG><a name="[ad]"></a>putchw</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, printf.o(i.putchw))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = putchw
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_format
</UL>

<P><STRONG><a name="[3a]"></a>putcp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf.o(i.putcp))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf.o(i.tfp_sprintf)
</UL>
<P><STRONG><a name="[77]"></a>ui2a</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, printf.o(i.ui2a))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ui2a
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_format
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2a
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
